#include "CishContext.h"
#include "Diagnostics.h"
#include "FormatOptions.h"
#include "Passes.h"
#include "Set.h"
#include "Stream.h"

#include <llvm/IR/LLVMContext.h>
#include <llvm/IR/LegacyPassManager.h>
#include <llvm/IRReader/IRReader.h>
#include <llvm/InitializePasses.h>
#include <llvm/Support/CommandLine.h>
#include <llvm/Support/TargetSelect.h>
#include <llvm/Support/raw_ostream.h>

#include <unistd.h>

namespace cl = llvm::cl;

cl::OptionCategory cishOptionCategory("Cish Options", "");

cl::list<cish::StripCasts> optStripCasts(
    "strip-casts",
    cl::desc("Which casts, if any, to strip from the output"),
    cl::values(
        clEnumValN(cish::StripCasts::Function,
                   "function",
                   "Strip casts to function types"),
        clEnumValN(cish::StripCasts::Pointer, "pointer", "Strip pointer casts"),
        clEnumValN(cish::StripCasts::Scalar, "scalar", "Strip scalar casts"),
        clEnumValN(cish::StripCasts::Vector,
                   "vector",
                   "Strip casts to vector types"),
        clEnumValN(cish::StripCasts::Never, "never", "Never strip casts"),
        clEnumValN(cish::StripCasts::All, "all", "Strip all casts")),
    cl::cat(cishOptionCategory));

cl::opt<std::string> optPrefix(
    "prefix",
    cl::desc("The prefix to use for any names auto-generated by cish"),
    cl::init(cish::FormatOptions::defPrefix),
    cl::cat(cishOptionCategory));

cl::list<cish::Annotations> optAnnotations(
    "annotate",
    cl::desc("Add annotations to the output"),
    cl::values(
        clEnumValN(cish::Annotations::Source,
                   "source",
                   "Annotate with source code if available"),
        clEnumValN(cish::Annotations::Cish,
                   "cish",
                   "Annotations from cish that may or may not be helpful"),
        clEnumValN(cish::Annotations::All, "all", "Add all annotations")),
    cl::cat(cishOptionCategory));

cl::opt<cish::IndentStyle> optIndentStyle(
    "indent-style",
    cl::desc("The indentation style to use"),
    cl::values(
        clEnumValN(cish::IndentStyle::KR, "kr", "K&R style"),
        clEnumValN(cish::IndentStyle::Allman, "allman", "Allman style"),
        clEnumValN(
            cish::IndentStyle::Stroustrup,
            "stroustrup",
            "Stroustrup style (like K&R but without the \"cuddled else\")")),
    cl::value_desc("style"),
    cl::init(cish::FormatOptions::defIndentStyle),
    cl::cat(cishOptionCategory));

cl::opt<unsigned>
    optOffset("indent-offset",
              cl::desc("Number of spaces to use for indentation. If 0, tabs "
                       "are used instead of spaces"),
              cl::value_desc("<n>"),
              cl::init(cish::FormatOptions::defOffset),
              cl::cat(cishOptionCategory));

cl::opt<cish::Parens>
    optParens("parens",
              cl::desc("How to use parentheses in expressions"),
              cl::values(clEnumValN(cish::Parens::Always,
                                    "always",
                                    "Always use parentheses"),
                         clEnumValN(cish::Parens::Smart,
                                    "smart",
                                    "Be smart about using parentheses")),
              cl::init(cish::FormatOptions::defParens),
              cl::cat(cishOptionCategory));

cl::opt<bool> optQuiet("quiet",
                       cl::desc("Do not print any messages"),
                       cl::init(cish::FormatOptions::defQuiet),
                       cl::cat(cishOptionCategory));

cl::opt<std::string> optOutput("o",
                               cl::desc("Output file"),
                               cl::value_desc("filename"),
                               cl::init("-"));

cl::opt<std::string> optFilename(cl::Positional,
                                 cl::desc("<input>"),
                                 cl::init("-"),
                                 cl::value_desc("filename"));

void initLLVM(int argc, char* argv[]) {
  llvm::InitializeAllAsmParsers();

  llvm::PassRegistry& Registry = *llvm::PassRegistry::getPassRegistry();
  llvm::initializeCore(Registry);
  llvm::initializeAnalysis(Registry);

  // This is a lousy hack but using LLVM's command line library ends up
  // populating it with a lot of options that are obviously not relevant
  // to this. Calling this with -help ends up displaying all of them which is
  // rather unpleasant. So just get rid of whatever we don't need
  cish::Set<std::string> optsKeep = {"help", "o"};
  for(auto& i : cl::getRegisteredOptions()) {
    llvm::StringRef key = i.first();
    cl::Option* opt = i.second;
    if(optsKeep.contains(key))
      opt->setDescription("Display available options");
    else if((opt->Category != &cishOptionCategory) and not opt->isPositional())
      i.second->removeArgument();
  }

  cl::ParseCommandLineOptions(argc, argv, "LLVM to C-ish converter\n");
  if(optOffset > 8)
    cish::fatal(cish::error() << "Invalid value for offset. Min 0, Max 8");
}

int main(int argc, char* argv[]) {
  llvm::LLVMContext llvmContext;
  initLLVM(argc, argv);

  llvm::SMDiagnostic err;
  std::unique_ptr<llvm::Module> pModule
      = parseIRFile(optFilename, err, llvmContext);
  if(!pModule) {
    err.print(argv[0], llvm::errs());
    return 1;
  }

  // Now that the clang AST Context has been set up, get down to business
  llvm::legacy::PassManager pm;
  pm.add(createCishModulePass());
  pm.add(createCishFunctionPass());
  pm.add(createCishOutputPass(optOutput));
  pm.run(*pModule);

  llvm::llvm_shutdown();

  return 0;
}
